Was ist Doctrine?
=================

Bei Doctrine handelt es sich um ein Framework für PHP, welches sowohl die Möglichkeit einer objektrelationalen Abbildung (object-relational mapping, ORM) als auch eine Datenbankabstraktionsschicht (database abstraction layer, DBAL) bereitstellt.

Somit ermöglicht das Framework einen vereinfachten Zugriff auf verschiedene Datenbanktypen, wie z.B. MySQL, Microsoft SQL Server, PostgreSQL, Oracle usw.

Workshop-Agenda
===============

[Index-Links]

1. Codebasis
============

Der gesamte Projektcode befindet sich unter
https://github.com/christopherstock/Doctrine2_Primer

2. Anforderungen an das Testprojekt
===================================

In unserer Beispielanwendung soll ein Bugtracker-System erstellt werden. Hierbei sind die folgenden Anforderungen zu berücksichtigen:

2.1. Gegeben sind die Entitäten "User", "Produkt" und "Bug".
2.2. Alle User und Produkte verfügen über eine eindeutige id sowie über einen Namen.
2.3. Jeder Bug kann ebenso über eine eindeutige id identifiziert werden und verfügt über eine Beschreibung sowie einem Erstellungsdatum.
2.4. Jeder Bug wurde von genau einem User gemeldet und ist genau einem User zugewiesen. 
2.5. Jeder Bug kann einem oder mehreren Produkten zugewiesen sein.

3. Erstellen des ERDs
=====================

[Grafik erd1.png]

4. Setup Doctrine via Composer
==============================

Zum Setup von Doctrine benötigen wir den Dependency Manager Composer. In unserer Projektdatei '/composer.json' sind alle Pakete definiert, die wir zum Betreiben von Doctrine benötigen. Diese werden von Composer automatisch unterhalb des Verzeichnisses 'vendor' installiert mittels eines CLI-Aufrufs von

composer install

5. Erstellen der Doctrine-Models
================================

Die Entitäten werden als PHP-Klassen erstellt. Anhand spezieller Annotations in der Klasse weiß Doctrine, auf welche Tabellen, Datentypen und Beziehungen sich diese Entität bezieht.

5.1. Erstellen des Models "Product"
===================================

Die Klasse 'src/model/Product.php' bezieht sich auf die Tabelle 'product', definiert die beiden Felder 'id' und 'name' mit den entsprechenden Datentypen 'int' und 'string'. Die Visibility der Felder ist beliebig. Auch die Definition der Setter und Getter ist nicht obligatorisch.

Die Namen sowie Reihenfolge der Felder werden exakt wie in der Klasse definiert in die Datenbank übernommen.

5.2. Erstellen des Models "User"
================================

Die Klasse 'src/model/User.php' bezieht sich auf die Tabelle 'user' und definiert außer den Tabellennamen keine Unterschiede zur Model-Klasse für die Entität 'Product'.

5.3. Erstellen des Models "Bug"
================================

Die Klasse 'src/model/Bug.php' bezieht sich auf die Tabelle 'bug' und definiert alle erforderlichen Felder. Für die beiden Felder 'reporter' und 'engineer' wird jeweils eine n:1 Beziehung zu der Entität 'User' festgelegt. Das Feld 'products' existiert nicht als physikalisches Feld, wird aber definiert, da es eine n:m-Beziehung ausdrückt. Dieses Feld muss im Konstruktor mit einer neuen Instanz der Doctrine-eigenen Klasse ArrayCollection vorbelegt werden.

6. Setup Doctrine CLI
=====================

Die Skripte unterhalb '/bin' beinhalten alle Aufrufe des Doctrine CLI-Clients. Damit dieser eine Verbindung zur Datenbank herstellen kann, benötigt er im ausführenden Verzeichnis eine Datei 'cli-config.php', in der die Datenbank- und die Doctrine-Konfiguration über eine Helper-Funktion zurückgegeben werden. Somit kennt Doctrine zum einen den Zugang zur Datenbank und zum anderen, wo sich die PHP-Klassen, die als die Doctrine-Models fungieren, befinden.

7. Generierung des Datenbankschemas
===================================

Ein Aufruf der Skript-Datei 'bin/create_db_schema' legt das Datenbankschema neu an. Vorraussetzung hierfür ist allerdings, dass die in der Konfiguration definierte Datenbank auch existiert.

Alternativ kann mit einem Aufruf der Skript-Datei 'bin/update_db_schema' das Datenbankschema aktualisiert werden, sofern Änderungen an den Models durchgeführt werden. Wurde noch kein Schema erstellt, so hat ein Aufruf dieser Skriptdatei die identische Funktion wie ein Aufruf des zuvor genannten Skriptes.

Nach dem initialen Durchlauf eines der beiden Skripte sind alle Tabellen in der Datenbank mit allen Indizes, Primary Keys und Foreign Keys erstellt. Die Tabelle 'model_bug_model_product' wurde durch die definierte n:m-Beziehung implizit erstellt und die beiden Felder 'reporter' und 'engineer' durch deren definierte n:1-Beziehung um das Postfix '_id' erweitert. Somit liegt nun das folgende Schema in der Datenbank vor:

[Grafik erd2.png]

8. Aufbau der Workshop-Applikation
==================================

Der Einstiegspunkt für alle Beispiele der Doctrine API befindet sich in der Datei '/index.php'. Hier wird lediglich der Wert des Get-Parameters 'action' ausgelesen und anhand dessen die entsprechende Beispielaktion in der Funktion 'Service_Action::perform' aufgerufen.

9. Verwenden der Doctrine 2 PHP API
===================================

Über das Hauptmenü können alle 15 Beispielaktionen aufgerufen werden. 

Alle Beispiele müssen, genau wie die CLI-Skripte, zunächst eine Instanz des Doctrine2 Entity Managers erzeugen, um das Doctrine-Framework nutzen zu können.

9.1. ACTION_1_CREATE_USER
=========================

Es wird ein neues User-Model erstellt, mit einem Namen angereichert und anschließend gespeichert.

9.2. ACTION_2_CREATE_PRODUCT
============================

Analog zu 9.1. wird hier ein Product-Model erstellt und gespeichert.

9.3. ACTION_3_CREATE_BUG
========================

Das Beispiel demonstriert das Erstellen eines neuen Bug-Models, bei dem alle erforderlichen Felder gesetzt werden. Außerdem werden mehrere Produkte zugewiesen, sodass nach dem Speichern Einträge in der Tabelle 'model_bug_model_product' vorzufinden sind.

9.4. ACTION_4_FIND_PRODUCT_BY_ID
================================

Da in Doctrine jede Tabelle über eine Id verfügen muss, kann jedes Model über eine Id gefunden werden. Hierfür stellt Doctrine eine eigene Funktion bereit. Im Beispiel wird ein Produkt anhand dessen Id aus der Datenbank ausgelesen und dessen Name angezeigt.

9.5. ACTION_5_FIND_BUG_BY_ID
============================

Analog zu 9.4. wird hier ein Bug anhand dessen Id aus der Datenbank ausgelesen.
Beim Zugriff auf die Model-Felder 'reporter', 'engineer' und 'products' werden diese verknüpften User- und Product-Models vom Doctrine-Framework dynamisch nachgeladen ('Lazy Loading').

9.6. ACTION_6_UPDATE_PRODUCT_NAME
=================================

Dieses Beispiel demonstriert, wie einfach es ist, den Wert eines Models unter Doctrine zu ändern.
Ein Produkt wird anhand dessen Id aus der Datenbank geladen. Anschließend wird das Feld 'name' geändert und das Model anschließend persistiert.

9.7. ACTION_7_UPDATE_BUG_STATUS
===============================

In diesem Beispiel wird, analog zu 9.6., der Status eines Bugs geändert. Das Beispiel demonstriert, dass sprechende Setter-Methoden, in diesem Falle die Methode 'close()', auch direkt in der Model-Klasse definiert werden können.

9.8. ACTION_8_FIND_PRODUCT_BY_NAME
==================================

Hier wird zum ersten mal die Funktion 'getRepository()' des Entity Managers aufgerufen. Hiermit wird das zuständige EntityRepository der Entität aufgerufen, mit dem erweiterte Suchen möglich sind. In diesem Fall wird nach einem bestimmten Wert in der Spalte 'name' gesucht und das erste Ergebnis zurückgeliefert.

9.9. ACTION_9_FIND_BUGS_BY_STATUS
=================================

Dieses Beispiel ist analog zur 9.8., allerdings werden hier *alle* Bugs zurückgegeben, die den Status 'OPEN' haben.

9.10. ACTION_10_FIND_ALL_PRODUCTS
=================================

Auch in diesem Beispiel wird das Repository der Entität 'Produkt' für die Rückgabe von Models verwendet. Diesmal werden *alle* Ergebnisse angefordert.

9.11. ACTION_11_SHOW_ALL_BUGS_MODELS
====================================

In diesem Beispiel wird zum ersten mal eine Abfrage mittels der Doctrine-eigenen Zwischensprache Doctrine Query Language (DQL) durchgeführt. Deren objektorientierter Ansatz ermöglicht ein abstraktes Arbeiten unabhängig von der verwendeten Datenbank. DQL umfasst nur die Menge an SQL-Funktionalität, die in allen von Doctrine unterstützten SQL-Systemen verfügbar sind. Daher sind beispielsweise komplexere Joins nicht immer möglich.

In diesem Fall werden alle Bugs mit deren zugehörigen Reportern, Engineers und Produkten mittels einer Query ausgelesen und als Models zurückgegeben, sodass Doctrine beim Zugriff auf die einzelnen Werte kein Lazy Loading mehr durchführen muss (s. Beispiel 9.5.).

9.12. ACTION_12_SHOW_ALL_BUGS_ARRAYS
====================================

Das Beispiel ist identisch zu dem Beispiel 9.11., allerdings werden hier alle Daten direkt in ein mehrdimensionales Array geladen. Hierbei wird nochmals verdeutlicht, dass nach dem Ausführen der DQL alle abhängigen Daten bereits vorhanden sind.

9.13. ACTION_13_SHOW_USER_DASHBOARD
===================================

Hier werden alle offenen Bugs für einen bestimmten User gezeigt. Das Beispiel demonstriert die Spezifizierung von Optionen für die definierte DQL ('setMaxResults') sowie das Binding von Parametern, welches ähnlich wie in PDO Statements funktioniert.

9.14. ACTION_14_SHOW_ALL_BUGS_REPOSITORY
========================================

Dieses Beispiel demonstriert die Verwendung einer eigenen Repository-Klasse. Diese muss in der Entität mit der Annotation '@Entity(repositoryClass="...")' definiert werden und wird beim Zugriff auf das Repository der Entität automatisch zurückgegeben. Der Vorteil ist, dass z.B. DQL-Statements auf diese Art und Weise direkt in der Repository-Klasse der zugehörigen Entität definiert werden können und somit innerhalb einer sprechenden Funktion gekapselt sind.

9.15. ACTION_15_SHOW_OPEN_BUG_COUNT_FOR_PRODUCTS
================================================

Dieses letzte Beispiel zeigt den Einsatz von skalaren Funktionen innerhalb eines DQL Statements.
Es werden alle Produkte ausgelesen und für jedes Produkt die Anzahl an offenen Bugs angezeigt.

Key Learnings
=============

Doctrine stellt ein sehr gut strukturiertes und durchdachtes Framework zur objektrelationalen Abbildung von Datenbanken dar und bietet mit dessen Datenbankabstraktionsschicht auch viel Flexibilität bei der Wahl des darunterliegenden Datenbanksystems. Allerdings verfügt es auch über einige strikte Einschränkungen bezüglich des Aufbaus der Datenbanken. So muss z.B. jede Tabelle zwingend einen Primärschlüssel aufweisen. Insbesondere mit großen oder stark verschachtelten Bestandsdatenbanken, die vorher mit regulärem SQL gepflegt wurden, kann es daher schnell zu Problemen bzgl. der Struktur und auch der Performance kommen.
